{"version":3,"sources":["Todo.jsx","NewTodoForm.jsx","TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","state","editedTask","props","task","isEditMode","handleComplete","completeHandler","id","handleRemove","evt","preventDefault","removeHandler","handleEditMode","setState","handleEdited","newTask","editHandler","handleChange","target","value","this","isCompleted","editForm","className","onSubmit","type","name","autoFocus","onChange","title","todo","checked","htmlFor","onClick","React","Component","NewTodoForm","handleSubmit","submitHandler","placeholder","TodoList","todos","readStorage","updateStorage","localStorage","setItem","JSON","stringify","addTodo","newTodo","uuid","st","compliteTodo","map","editTodo","removeTodo","filter","parse","getItem","todoList","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f29ad92f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends React.Component {\r\n\r\n    state = {\r\n        editedTask: this.props.task, \r\n        isEditMode: false,\r\n    }\r\n\r\n    handleComplete = () => {\r\n        this.props.completeHandler(this.props.id);\r\n    }\r\n    \r\n    handleRemove = evt => {\r\n        evt.preventDefault();\r\n        this.props.removeHandler(this.props.id);\r\n    }\r\n\r\n    handleEditMode = evt => {\r\n        evt.preventDefault();\r\n        this.setState({isEditMode: true});\r\n    }\r\n\r\n    handleEdited = evt => {\r\n        evt.preventDefault();\r\n        let newTask = this.state.editedTask;\r\n        this.props.editHandler(this.props.id, newTask);\r\n        this.setState({isEditMode: false})\r\n    }\r\n\r\n    handleChange = evt => {\r\n        this.setState({\r\n            editedTask: evt.target.value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const {id, task, isCompleted} = this.props;\r\n        const {isEditMode, editedTask} = this.state;\r\n\r\n        const editForm = \r\n            <form className=\"todo edit\" onSubmit={this.handleEdited}>\r\n                <div></div>\r\n                <input type=\"text\" name=\"TaskEdit\" value={editedTask} autoFocus onChange={this.handleChange} />\r\n                <button type=\"submit\" title=\"Save\"><i className=\"far fa-save\"></i></button>\r\n            </form>;\r\n        \r\n        const todo = \r\n            <div className=\"todo\">\r\n                <input type=\"checkbox\" id={id} checked={isCompleted} onChange={this.handleComplete}/>\r\n                <label htmlFor={id}>{task}</label>\r\n\r\n                <button title=\"Edit\" onClick={this.handleEditMode} >\r\n                    <i className=\"far fa-edit\"></i>\r\n                </button>\r\n                <button title=\"Remove\" onClick={this.handleRemove} >\r\n                    <i className=\"far fa-trash-alt\"></i>\r\n                </button>\r\n            </div>;\r\n\r\n        return (\r\n            <li>\r\n                {isEditMode ? editForm : todo}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Todo;","import React from 'react';\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends React.Component {\r\n\r\n    state = {task: \"\"}\r\n\r\n    handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const {task} = this.state;\r\n        if (task === \"\") return;\r\n        this.props.submitHandler(task);\r\n        this.setState({task: \"\"});\r\n    }\r\n\r\n    handleChange = evt => {\r\n        this.setState({task: evt.target.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\" \r\n                        id=\"newTodo\" \r\n                        placeholder=\"New ToDo...\" \r\n                        value={this.state.task} \r\n                        onChange={this.handleChange} \r\n                    />\r\n                    <button type=\"submit\" title=\"Add new ToDo\">\r\n                        <i className=\"fas fa-plus\"></i>\r\n                    </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default NewTodoForm;","import React from \"react\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport Todo from \"./Todo\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport \"./TodoList.css\";\r\n\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    state = {todos: this.readStorage() || []}\r\n    \r\n    \r\n    readStorage() {\r\n        return JSON.parse(localStorage.getItem(\"todos\"));\r\n    }\r\n    \r\n    updateStorage = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\r\n    }\r\n\r\n\r\n    addTodo = task => {\r\n        const newTodo = {\r\n            id: uuid(),\r\n            task, \r\n            isCompleted: false,\r\n        };\r\n\r\n        this.setState(st => ({\r\n            todos: [...st.todos, newTodo]\r\n        }), this.updateStorage);\r\n    }\r\n\r\n    compliteTodo = id => {\r\n        this.setState(st => ({\r\n            todos: st.todos.map(todo => (\r\n                (todo.id === id) \r\n                ? {...todo, isCompleted: !todo.isCompleted} \r\n                : todo\r\n                ))\r\n        }), this.updateStorage);\r\n    }\r\n\r\n    editTodo = (id, task) => {\r\n        this.setState(st => ({\r\n            todos: st.todos.map(todo => (\r\n                (todo.id === id) \r\n                ? {...todo, task} \r\n                : todo\r\n                ))\r\n        }), this.updateStorage);\r\n    }\r\n\r\n    removeTodo = id => {\r\n        this.setState(st => ({\r\n            todos: st.todos.filter(todo => (todo.id !== id))\r\n        }), this.updateStorage);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const todoList = \r\n            this.state.todos.map(({id, task, isCompleted}) => (\r\n                <Todo \r\n                    key={id}\r\n                    id={id}\r\n                    task={task}\r\n                    isCompleted={isCompleted}\r\n                    completeHandler={this.compliteTodo}\r\n                    editHandler={this.editTodo}\r\n                    removeHandler={this.removeTodo}\r\n                />\r\n            ));\r\n\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <NewTodoForm submitHandler={this.addTodo}/>\r\n                <ul className=\"list\">\r\n                    {todoList}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from \"./TodoList\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}